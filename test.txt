Below is the test function I used for K6. Results were sent to New Relic and uploaded as well.

Notes:
- ~1.7k RPS result
- Worked up to 500 participating virtual users
- Each user generated 8 HTTP requests
  - GET: 6x total (1/3 DB, 2/3 DB, and 3/3 DB)
  - POST: 1x
  - DELETE: 1x

/////////////////////////////////////////////////////////////

import http from 'k6/http';
import { sleep } from 'k6';

export let options = {
  stages: [
    { duration: '2m', target: 100 }, // below normal load
    { duration: '5m', target: 100 },
    { duration: '2m', target: 200 }, // normal load
    { duration: '5m', target: 200 },
    { duration: '2m', target: 350 }, // around the breaking point
    { duration: '5m', target: 350 },
    { duration: '2m', target: 500 }, // beyond the breaking point
    { duration: '5m', target: 500 },
    { duration: '10m', target: 0 }, // scale down. Recovery stage.
  ],
};

export default function () {
  const BASE_URL = 'http://localhost:3001/'; // make sure this is not production

  // get a random whole number in a specific range
  const getRandomNum = (min, max) => {
    return Math.random() * (max - min) + min;
  }

  var id = Math.floor(Math.random() * 10000000);
  var idBeg = getRandomNum(1, 3333333);
  var idMid = getRandomNum(3333334, 6666666);
  var idEnd = getRandomNum(6666667, 10000000);

  let responses = http.batch([
    [
      'GET',
      `${BASE_URL}/api/listings/${idBeg}`,
      null,
      { tags: { name: 'Photos Get' } },
    ],
    [
      'GET',
      `${BASE_URL}/api/listings/${idMid}`,
      null,
      { tags: { name: 'Photos Get' } },
    ],
    [
      'GET',
      `${BASE_URL}/api/listings/${idMid}`,
      null,
      { tags: { name: 'Photos Get' } },
    ],
    [
      'GET',
      `${BASE_URL}/api/listings/${idEnd}`,
      null,
      { tags: { name: 'Photos Get' } },
    ],
    [
      'GET',
      `${BASE_URL}/api/listings/${idEnd}`,
      null,
      { tags: { name: 'Photos Get' } },
    ],
    [
      'GET',
      `${BASE_URL}/api/listings/${idEnd}`,
      null,
      { tags: { name: 'Photos Get' } },
    ],
    [
      'POST',
      `${BASE_URL}/api/addListing`,
      {
        address: '123 Example Street',
        baths: 3,
        beds: 4,
        city: 'Alexandria',
        price: 800000,
        state: 'Virginia',
        zipCode: 23064,
        bathroom: 'http://thisisyourimage.com',
        bedroom: 'http://thisisyourimage.com',
        bedroom2: 'http://thisisyourimage.com',
        house: 'http://thisisyourimage.com',
        house2: 'http://thisisyourimage.com',
        house3: 'http://thisisyourimage.com',
        kitchen: 'http://thisisyourimage.com',
        kitchen2: 'http://thisisyourimage.com',
        livingroom: 'http://thisisyourimage.com',
        livingroom2: 'http://thisisyourimage.com'
      },
      { tags: { name: 'Photos Write' } },
    ],
    [
      'DELETE',
      `${BASE_URL}/api/listings/${id}`,
      null,
      { tags: { name: 'Photos Delete' } },
    ],
  ]);

  sleep(1);
}
